{"version":3,"file":"dist.js","sources":["../../kraftvaerk.umbraco.blockfilter.Frontend/src/index.ts"],"sourcesContent":["\r\nimport { ManifestBase, UmbConditionConfigBase, UmbEntryPointOnInit, UmbExtensionRegistry } from '@umbraco-cms/backoffice/extension-api';\r\n\r\n\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth';\r\nimport { ManifestModal } from '@umbraco-cms/backoffice/modal';\r\n\r\nconst manifests: ManifestModal[] = [\r\n  {\r\n    type: 'modal',\r\n    // This alias is the key. Weâ€™re overriding the core catalogue by reusing its alias.\r\n    // If the alias ever changes upstream, update this to match.\r\n    alias: 'Umb.Modal.BlockCatalogue',\r\n    \r\n    name: 'Custom Block Catalogue Modal',\r\n    // Your custom element tag name:\r\n    elementName: 'custom-umb-block-catalogue',\r\n    // Lazy-load the element class:\r\n    js: () => import('./elements/UmbBlockCatalogueModalElement.ts'),\r\n    // Make sure we win registration ordering if both exist:\r\n    weight: -10000,\r\n    \r\n  },\r\n];\r\n\r\nexport const onInit: UmbEntryPointOnInit = async (_host, extensionRegistry) => {\r\n  _host.consumeContext(UMB_AUTH_CONTEXT, async (authContext) => {\r\n    const token = await authContext?.getLatestToken() ?? '';\r\n    const base = authContext?.getServerUrl() ?? '';\r\n   //extensionRegistry.registerMany(manifests);\r\n  console.log(token,base)\r\n   \r\n   logAllExtensions(extensionRegistry);\r\n  });\r\n};\r\n\r\n  \r\nfunction logAllExtensions(extensionRegistry : UmbExtensionRegistry<ManifestBase, UmbConditionConfigBase<string>, ManifestBase>) {\r\n  setTimeout(() => {\r\n    const all = extensionRegistry.getAllExtensions();\r\n    const found = all.find(x => x.alias === 'Umb.Modal.BlockCatalogue');\r\n    \r\n    if(!found) {\r\n      console.log(\"not found\")\r\n      logAllExtensions(extensionRegistry);\r\n    }\r\n    else {\r\n      console.log(\"found\", found);\r\n      extensionRegistry.unregister(found.alias);\r\n      extensionRegistry.registerMany(manifests);\r\n    }\r\n  }, 200);\r\n}"],"names":["manifests","onInit","_host","extensionRegistry","UMB_AUTH_CONTEXT","authContext","token","base","logAllExtensions","found","x"],"mappings":";AAOA,MAAMA,IAA6B;AAAA,EACjC;AAAA,IACE,MAAM;AAAA;AAAA;AAAA,IAGN,OAAO;AAAA,IAEP,MAAM;AAAA;AAAA,IAEN,aAAa;AAAA;AAAA,IAEb,IAAI,MAAM,OAAO,6CAA6C;AAAA;AAAA,IAE9D,QAAQ;AAAA,EAEV;AACF,GAEaC,IAA8B,OAAOC,GAAOC,MAAsB;AACvE,EAAAD,EAAA,eAAeE,GAAkB,OAAOC,MAAgB;AAC5D,UAAMC,IAAQ,OAAMD,KAAA,gBAAAA,EAAa,qBAAoB,IAC/CE,KAAOF,KAAA,gBAAAA,EAAa,mBAAkB;AAEtC,YAAA,IAAIC,GAAMC,CAAI,GAErBC,EAAiBL,CAAiB;AAAA,EAAA,CAClC;AACH;AAGA,SAASK,EAAiBL,GAAsG;AAC9H,aAAW,MAAM;AAEf,UAAMM,IADMN,EAAkB,mBACZ,KAAK,CAAKO,MAAAA,EAAE,UAAU,0BAA0B;AAElE,IAAID,KAKM,QAAA,IAAI,SAASA,CAAK,GACRN,EAAA,WAAWM,EAAM,KAAK,GACxCN,EAAkB,aAAaH,CAAS,MANxC,QAAQ,IAAI,WAAW,GACvBQ,EAAiBL,CAAiB;AAAA,KAOnC,GAAG;AACR;"}